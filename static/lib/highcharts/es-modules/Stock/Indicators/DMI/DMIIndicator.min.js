"use strict";import MultipleLinesComposition from"../MultipleLinesComposition.js";import SeriesRegistry from"../../../Core/Series/SeriesRegistry.js";const SMAIndicator=SeriesRegistry.seriesTypes["sma"];import U from"../../../Core/Utilities.js";const{correctFloat,extend,isArray,merge}=U;class DMIIndicator extends SMAIndicator{calculateDM(t,e,s){var a=t[e][1],i=t[e][2],o=t[e-1][1],t=t[e-1][2];let r;return r=t-i<a-o?s?Math.max(a-o,0):0:s?0:Math.max(t-i,0),correctFloat(r)}calculateDI(t,e){return t/e*100}calculateDX(t,e){return correctFloat(Math.abs(t-e)/Math.abs(t+e)*100)}smoothValues(t,e,s){return correctFloat(t-t/s+e)}getTR(t,e){return correctFloat(Math.max(t[1]-t[2],e?Math.abs(t[1]-e[3]):0,e?Math.abs(t[2]-e[3]):0))}getValues(t,e){const h=e.period,m=t.xData,I=t.yData,s=I?I.length:0,y=[],M=[],d=[];if(!(m.length<=h)&&isArray(I[0])&&4===I[0].length){let p=0,c=0,u=0,D;for(D=1;D<s;D++){let t,e,s,a,i,o,r,l,n;D<=h?(a=this.calculateDM(I,D,!0),i=this.calculateDM(I,D),o=this.getTR(I[D],I[D-1]),p+=a,c+=i,u+=o,D===h&&(r=this.calculateDI(p,u),l=this.calculateDI(c,u),n=this.calculateDX(p,c),y.push([m[D],n,r,l]),M.push(m[D]),d.push([n,r,l]))):(a=this.calculateDM(I,D,!0),i=this.calculateDM(I,D),o=this.getTR(I[D],I[D-1]),t=this.smoothValues(p,a,h),e=this.smoothValues(c,i,h),s=this.smoothValues(u,o,h),p=t,c=e,u=s,r=this.calculateDI(p,u),l=this.calculateDI(c,u),n=this.calculateDX(p,c),y.push([m[D],n,r,l]),M.push(m[D]),d.push([n,r,l]))}return{values:y,xData:M,yData:d}}}}DMIIndicator.defaultOptions=merge(SMAIndicator.defaultOptions,{params:{index:void 0},marker:{enabled:!1},tooltip:{pointFormat:'<span style="color: {point.color}">‚óè</span><b> {series.name}</b><br/><span style="color: {point.color}">DX</span>: {point.y}<br/><span style="color: {point.series.options.plusDILine.styles.lineColor}">+DI</span>: {point.plusDI}<br/><span style="color: {point.series.options.minusDILine.styles.lineColor}">-DI</span>: {point.minusDI}<br/>'},plusDILine:{styles:{lineWidth:1,lineColor:"#06b535"}},minusDILine:{styles:{lineWidth:1,lineColor:"#f21313"}},dataGrouping:{approximation:"averages"}}),extend(DMIIndicator.prototype,{areaLinesNames:[],nameBase:"DMI",linesApiNames:["plusDILine","minusDILine"],pointArrayMap:["y","plusDI","minusDI"],parallelArrays:["x","y","plusDI","minusDI"],pointValKey:"y"}),MultipleLinesComposition.compose(DMIIndicator),SeriesRegistry.registerSeriesType("dmi",DMIIndicator);export default DMIIndicator;