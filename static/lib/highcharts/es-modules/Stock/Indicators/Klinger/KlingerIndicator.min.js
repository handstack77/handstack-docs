"use strict";import MultipleLinesComposition from"../MultipleLinesComposition.js";import SeriesRegistry from"../../../Core/Series/SeriesRegistry.js";const{ema:EMAIndicator,sma:SMAIndicator}=SeriesRegistry.seriesTypes;import U from"../../../Core/Utilities.js";const{correctFloat,error,extend,isArray,merge}=U;class KlingerIndicator extends SMAIndicator{calculateTrend(e,t){return e[t][1]+e[t][2]+e[t][3]>e[t-1][1]+e[t-1][2]+e[t-1][3]?1:-1}isValidData(e){const t=this.chart,r=this.options,i=this.linkedParent,o=isArray(e)&&4===e.length,s=this.volumeSeries||(this.volumeSeries=t.get(r.params.volumeSeriesID));return s||error("Series "+r.params.volumeSeriesID+" not found! Check `volumeSeriesID`.",!0,i.chart),!(![i,s].every(function(e){return e&&e.xData&&e.xData.length>=r.params.slowAvgPeriod})||!o)}getCM(e,t,r,i,o){return correctFloat(t+(r===i?e:o))}getDM(e,t){return correctFloat(e-t)}getVolumeForce(e){const t=[];let r,i,o,s=1,a=0,n=e[0][1]-e[0][2],l=0,g;for(s;s<e.length;s++)g=this.calculateTrend(e,s),i=this.getDM(e[s][1],e[s][2]),r=this.getCM(a,i,g,l,n),o=this.volumeSeries.yData[s]*g*Math.abs(2*(i/r-1))*100,t.push([o]),l=g,a=r,n=i;return t}getEMA(e,t,r,i,o,s,a){return EMAIndicator.prototype.calculateEma(a||[],e,void 0===s?1:s,i,t,void 0===o?-1:o,r)}getSMA(e,t,r){return EMAIndicator.prototype.accumulatePeriodPoints(e,t,r)/e}getValues(e,t){const r=[],i=e.xData,o=e.yData,s=[],a=[],n=[];let l,g=0,p=0,c,d=void 0,u=void 0,m=null;if(this.isValidData(o[0])){var h=this.getVolumeForce(o),A=this.getSMA(t.fastAvgPeriod,0,h),v=this.getSMA(t.slowAvgPeriod,0,h),y=2/(t.fastAvgPeriod+1),M=2/(t.slowAvgPeriod+1);for(g;g<o.length;g++)g>=t.fastAvgPeriod&&(p=this.getEMA(h,d,A,y,0,g,i)[1],d=p),g>=t.slowAvgPeriod&&(c=this.getEMA(h,u,v,M,0,g,i)[1],u=c,l=correctFloat(p-c),n.push(l),n.length>=t.signalPeriod&&(m=n.slice(-t.signalPeriod).reduce((e,t)=>e+t)/t.signalPeriod),r.push([i[g],l,m]),s.push(i[g]),a.push([l,m]));return{values:r,xData:s,yData:a}}}}KlingerIndicator.defaultOptions=merge(SMAIndicator.defaultOptions,{params:{fastAvgPeriod:34,slowAvgPeriod:55,signalPeriod:13,volumeSeriesID:"volume"},signalLine:{styles:{lineWidth:1,lineColor:"#ff0000"}},dataGrouping:{approximation:"averages"},tooltip:{pointFormat:'<span style="color: {point.color}">‚óè</span><b> {series.name}</b><br/><span style="color: {point.color}">Klinger</span>: {point.y}<br/><span style="color: {point.series.options.signalLine.styles.lineColor}">Signal</span>: {point.signal}<br/>'}}),extend(KlingerIndicator.prototype,{areaLinesNames:[],linesApiNames:["signalLine"],nameBase:"Klinger",nameComponents:["fastAvgPeriod","slowAvgPeriod"],pointArrayMap:["y","signal"],parallelArrays:["x","y","signal"],pointValKey:"y"}),MultipleLinesComposition.compose(KlingerIndicator),SeriesRegistry.registerSeriesType("klinger",KlingerIndicator);export default KlingerIndicator;