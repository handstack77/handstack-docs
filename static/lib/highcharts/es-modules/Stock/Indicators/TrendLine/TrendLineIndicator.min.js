"use strict";import SeriesRegistry from"../../../Core/Series/SeriesRegistry.js";const SMAIndicator=SeriesRegistry.seriesTypes["sma"];import U from"../../../Core/Utilities.js";const{extend,merge,isArray}=U;class TrendLineIndicator extends SMAIndicator{constructor(){super(...arguments),this.updateAllPoints=!0}getValues(e,t){const r=e.xData,n=e.yData,i=[],s=[],a=[],o=[],d=t.index;let l=0,p=0,c=0,g=0,u=0;for(let e=0;e<r.length;e++)0!==e&&r[e]===r[e-1]||u++,i.push(u);for(let e=0;e<i.length;e++)c+=i[e],g+=isArray(n[e])?n[e][d]:n[e];var h,y,m=c/i.length,f=g/n.length;for(let e=0;e<i.length;e++){var S=isArray(n[e])?n[e][d]:n[e];l+=(i[e]-m)*(S-f),p+=Math.pow(i[e]-m,2)}for(let e=0;e<i.length;e++)r[e]!==a[a.length-1]&&(h=r[e],y=f+l/p*(i[e]-m),s.push([h,y]),a.push(h),o.push(y));return{xData:a,yData:o,values:s}}}TrendLineIndicator.defaultOptions=merge(SMAIndicator.defaultOptions,{params:{period:void 0,index:3}}),extend(TrendLineIndicator.prototype,{nameBase:"Trendline",nameComponents:void 0}),SeriesRegistry.registerSeriesType("trendline",TrendLineIndicator);export default TrendLineIndicator;