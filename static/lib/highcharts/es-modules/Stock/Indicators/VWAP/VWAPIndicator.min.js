"use strict";import SeriesRegistry from"../../../Core/Series/SeriesRegistry.js";const SMAIndicator=SeriesRegistry.seriesTypes["sma"];import U from"../../../Core/Utilities.js";const{error,isArray,merge}=U;class VWAPIndicator extends SMAIndicator{getValues(e,r){const t=e.chart,s=e.xData,i=e.yData,a=r.period;let o=!0,u;if(u=t.get(r.volumeSeriesID))return isArray(i[0])||(o=!1),this.calculateVWAPValues(o,s,i,u,a);error("Series "+r.volumeSeriesID+" not found! Check `volumeSeriesID`.",!0,t)}calculateVWAPValues(e,r,t,s,i){const a=s.yData,o=s.xData.length,u=r.length,l=[],n=[],c=[],d=[],p=[];let S,m,g,y,A,I;for(S=u<=o?u:o,A=0,I=0;A<S;A++)m=e?(t[A][1]+t[A][2]+t[A][3])/3:t[A],m*=a[A],g=I?l[A-1]+m:m,y=I?n[A-1]+a[A]:a[A],l.push(g),n.push(y),p.push([r[A],g/y]),c.push(p[A][0]),d.push(p[A][1]),++I===i&&(I=0);return{values:p,xData:c,yData:d}}}VWAPIndicator.defaultOptions=merge(SMAIndicator.defaultOptions,{params:{index:void 0,period:30,volumeSeriesID:"volume"}}),SeriesRegistry.registerSeriesType("vwap",VWAPIndicator);export default VWAPIndicator;