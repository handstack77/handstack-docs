"use strict";import SeriesRegistry from"../../../Core/Series/SeriesRegistry.js";const EMAIndicator=SeriesRegistry.seriesTypes["ema"];import U from"../../../Core/Utilities.js";const{correctFloat,isArray,merge}=U;class DEMAIndicator extends EMAIndicator{getEMA(e,t,r,s,i,a){return super.calculateEma(a||[],e,void 0===i?1:i,this.EMApercent,t,void 0===s?-1:s,r)}getValues(e,t){const r=t.period,s=[],i=2*r,a=e.xData,o=e.yData,c=o?o.length:0,n=[],d=[],u=[];let p=0,l=0,A,E,g,M,m=-1,y,h=0;if(this.EMApercent=2/(r+1),!(c<2*r-1)){for(isArray(o[0])&&(m=t.index||0),p=super.accumulatePeriodPoints(r,m,o),h=p/r,p=0,M=r;M<c+2;M++)M<c+1&&(l=this.getEMA(o,E,h,m,M)[1],s.push(l)),E=l,M<i?p+=l:(M===i&&(h=p/r),l=s[M-r-1],A=this.getEMA([l],g,h)[1],y=[a[M-2],correctFloat(2*l-A)],n.push(y),d.push(y[0]),u.push(y[1]),g=A);return{values:n,xData:d,yData:u}}}}DEMAIndicator.defaultOptions=merge(EMAIndicator.defaultOptions),SeriesRegistry.registerSeriesType("dema",DEMAIndicator);export default DEMAIndicator;