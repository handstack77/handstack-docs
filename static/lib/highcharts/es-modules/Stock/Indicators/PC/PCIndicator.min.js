"use strict";import AU from"../ArrayUtilities.js";import MultipleLinesComposition from"../MultipleLinesComposition.js";import Palettes from"../../../Core/Color/Palettes.js";import SeriesRegistry from"../../../Core/Series/SeriesRegistry.js";const SMAIndicator=SeriesRegistry.seriesTypes["sma"];import U from"../../../Core/Utilities.js";const{merge,extend}=U;class PCIndicator extends SMAIndicator{getValues(e,t){const i=t.period,o=e.xData,r=e.yData,s=r?r.length:0,a=[],n=[],p=[];let l,m,d,c,C,y,u;if(!(s<i)){for(u=i;u<=s;u++)c=o[u-1],C=r.slice(u-i,u),l=((m=(y=AU.getArrayExtremes(C,2,1))[1])+(d=y[0]))/2,a.push([c,m,l,d]),n.push(c),p.push([m,l,d]);return{values:a,xData:n,yData:p}}}}PCIndicator.defaultOptions=merge(SMAIndicator.defaultOptions,{params:{index:void 0,period:20},lineWidth:1,topLine:{styles:{lineColor:Palettes.colors[2],lineWidth:1}},bottomLine:{styles:{lineColor:Palettes.colors[8],lineWidth:1}},dataGrouping:{approximation:"averages"}}),extend(PCIndicator.prototype,{areaLinesNames:["top","bottom"],nameBase:"Price Channel",nameComponents:["period"],linesApiNames:["topLine","bottomLine"],pointArrayMap:["top","middle","bottom"],pointValKey:"middle"}),MultipleLinesComposition.compose(PCIndicator),SeriesRegistry.registerSeriesType("pc",PCIndicator);export default PCIndicator;