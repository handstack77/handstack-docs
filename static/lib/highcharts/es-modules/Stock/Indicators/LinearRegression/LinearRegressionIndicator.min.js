"use strict";import SeriesRegistry from"../../../Core/Series/SeriesRegistry.js";const SMAIndicator=SeriesRegistry.seriesTypes["sma"];import U from"../../../Core/Utilities.js";const{isArray,extend,merge}=U;class LinearRegressionIndicator extends SMAIndicator{getRegressionLineParameters(e,t){function r(e,t){return isArray(e)?e[t]:e}const s=this.options.params.index,i=e.reduce(function(e,t){return t+e},0),n=t.reduce(function(e,t){return r(t,s)+e},0),a=i/e.length,o=n/t.length;let c,l,g,u=0,p=0;for(g=0;g<e.length;g++)c=e[g]-a,l=r(t[g],s)-o,u+=c*l,p+=Math.pow(c,2);var d=p?u/p:0;return{slope:d,intercept:o-d*a}}getEndPointY(e,t){return e.slope*t+e.intercept}transformXData(e,t){const r=e[0];return e.map(function(e){return(e-r)/t})}findClosestDistance(e){let t,r,s;for(s=1;s<e.length-1;s++)0<(t=e[s]-e[s-1])&&(void 0===r||t<r)&&(r=t);return r}getValues(e,t){const r=e.xData,s=e.yData,i=t.period,n={xData:[],yData:[],values:[]},a=this.options.params.xAxisUnit||this.findClosestDistance(r);let o,c,l,g,u,p,d,m,f;for(c=i-1;c<=r.length-1;c++)l=c-i+1,g=c+1,u=r[c],d=r.slice(l,g),m=s.slice(l,g),f=this.transformXData(d,a),o=this.getRegressionLineParameters(f,m),p=this.getEndPointY(o,f[f.length-1]),n.values.push({regressionLineParameters:o,x:u,y:p}),n.xData.push(u),n.yData.push(p);return n}}LinearRegressionIndicator.defaultOptions=merge(SMAIndicator.defaultOptions,{params:{xAxisUnit:null},tooltip:{valueDecimals:4}}),extend(LinearRegressionIndicator.prototype,{nameBase:"Linear Regression Indicator"}),SeriesRegistry.registerSeriesType("linearRegression",LinearRegressionIndicator);export default LinearRegressionIndicator;