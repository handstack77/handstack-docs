"use strict";import MultipleLinesComposition from"../MultipleLinesComposition.js";import SeriesRegistry from"../../../Core/Series/SeriesRegistry.js";const SMAIndicator=SeriesRegistry.seriesTypes["sma"];import U from"../../../Core/Utilities.js";const{correctFloat,extend,merge}=U;function getBaseForBand(e,t,a){return correctFloat(t-e)/(correctFloat(t+e)/2)*1e3*a}function getPointUB(e,t){return e*correctFloat(1+2*t)}function getPointLB(e,t){return e*correctFloat(1-2*t)}class ABandsIndicator extends SMAIndicator{getValues(e,t){const a=t.period,i=t.factor,o=t.index,s=e.xData,r=e.yData,n=r?r.length:0,p=[],l=[],d=[],c=[],u=[];let m,g,y,B,f,x,D,h,A,L,I;if(!(n<a)){for(I=0;I<=n;I++)I<n&&(f=getBaseForBand(r[I][2],r[I][1],i),p.push(getPointUB(r[I][1],f)),l.push(getPointLB(r[I][2],f))),I>=a&&(A=s.slice(I-a,I),L=r.slice(I-a,I),D=super.getValues.call(this,{xData:A,yData:p.slice(I-a,I)},{period:a}),h=super.getValues.call(this,{xData:A,yData:l.slice(I-a,I)},{period:a}),B=(x=super.getValues.call(this,{xData:A,yData:L},{period:a,index:o})).xData[0],g=D.yData[0],y=h.yData[0],m=x.yData[0],d.push([B,g,m,y]),c.push(B),u.push([g,m,y]));return{values:d,xData:c,yData:u}}}}ABandsIndicator.defaultOptions=merge(SMAIndicator.defaultOptions,{params:{period:20,factor:.001,index:3},lineWidth:1,topLine:{styles:{lineWidth:1}},bottomLine:{styles:{lineWidth:1}},dataGrouping:{approximation:"averages"}}),extend(ABandsIndicator.prototype,{areaLinesNames:["top","bottom"],linesApiNames:["topLine","bottomLine"],nameBase:"Acceleration Bands",nameComponents:["period","factor"],pointArrayMap:["top","middle","bottom"],pointValKey:"middle"}),MultipleLinesComposition.compose(ABandsIndicator),SeriesRegistry.registerSeriesType("abands",ABandsIndicator);export default ABandsIndicator;