"use strict";import SeriesRegistry from"../../../Core/Series/SeriesRegistry.js";const SMAIndicator=SeriesRegistry.seriesTypes["sma"];import U from"../../../Core/Utilities.js";const{correctFloat,isArray,merge}=U;class EMAIndicator extends SMAIndicator{accumulatePeriodPoints(e,r,t){let i=0,s=0,a;for(;s<e;)a=r<0?t[s]:t[s][r],i+=a,s++;return i}calculateEma(e,r,t,i,s,a,o){e=e[t-1],r=a<0?r[t-1]:r[t-1][a];return[e,void 0===s?o:correctFloat(r*i+s*(1-i))]}getValues(e,r){const t=r.period,i=e.xData,s=e.yData,a=s?s.length:0,o=2/(t+1),c=[],n=[],d=[];let l,u,m,p=-1,y;if(!(a<t)){for(isArray(s[0])&&(p=r.index||0),y=this.accumulatePeriodPoints(t,p,s)/t,m=t;m<a+1;m++)u=this.calculateEma(i,s,m,o,l,p,y),c.push(u),n.push(u[0]),d.push(u[1]),l=u[1];return{values:c,xData:n,yData:d}}}}EMAIndicator.defaultOptions=merge(SMAIndicator.defaultOptions,{params:{index:3,period:9}}),SeriesRegistry.registerSeriesType("ema",EMAIndicator);export default EMAIndicator;