"use strict";import SeriesRegistry from"../../../Core/Series/SeriesRegistry.js";const{atr:ATRIndicator,sma:SMAIndicator}=SeriesRegistry.seriesTypes;import U from"../../../Core/Utilities.js";const{addEvent,correctFloat,isArray,extend,merge,objectEach}=U;function createPointObj(e,o,t){return{index:o,close:e.yData[o][t],x:e.xData[o]}}class SupertrendIndicator extends SMAIndicator{init(){const t=this,r=(super.init.apply(t,arguments),addEvent(this.chart.constructor,"afterLinkSeries",()=>{if(t.options){const e=t.options,o=t.linkedParent.options;e.cropThreshold=o.cropThreshold-(e.params.period-1)}r()},{order:1}))}drawGraph(){const t=this,e=t.options,o=t.linkedParent,r=o?o.points:[],i=t.points,n=t.graph,l=r.length-i.length,s=0<l?l:0,a={options:{gapSize:e.gapSize}},p={top:[],bottom:[],intersect:[]},c={top:{styles:{lineWidth:e.lineWidth,lineColor:e.fallingTrendColor||e.color,dashStyle:e.dashStyle}},bottom:{styles:{lineWidth:e.lineWidth,lineColor:e.risingTrendColor||e.color,dashStyle:e.dashStyle}},intersect:e.changeTrendLine};let d,h,g,u,y,x,m,S,T,f=i.length;for(;f--;)d=i[f],h=i[f-1],g=r[f-1+s],u=r[f-2+s],y=r[f+s],x=r[f+s+1],m=d.options.color,S={x:d.x,plotX:d.plotX,plotY:d.plotY,isNull:!1},!u&&g&&o.yData[g.index-1]&&(u=createPointObj(o,g.index-1,3)),!x&&y&&o.yData[y.index+1]&&(x=createPointObj(o,y.index+1,3)),!g&&u&&o.yData[u.index+1]?g=createPointObj(o,u.index+1,3):!g&&y&&o.yData[y.index-1]&&(g=createPointObj(o,y.index-1,3)),d&&g&&y&&u&&d.x!==g.x&&(d.x===y.x?(u=g,g=y):d.x===u.x?(g=u,u={close:o.yData[g.index-1][3],x:o.xData[g.index-1]}):x&&d.x===x.x&&(g=x,u=y)),h&&u&&g?(T={x:h.x,plotX:h.plotX,plotY:h.plotY,isNull:!1},d.y>=g.close&&h.y>=u.close?(d.color=m||e.fallingTrendColor||e.color,p.top.push(S)):d.y<g.close&&h.y<u.close?(d.color=m||e.risingTrendColor||e.color,p.bottom.push(S)):(p.intersect.push(S),p.intersect.push(T),p.intersect.push(merge(T,{isNull:!0})),d.y>=g.close&&h.y<u.close?(d.color=m||e.fallingTrendColor||e.color,h.color=m||e.risingTrendColor||e.color,p.top.push(S),p.top.push(merge(T,{isNull:!0}))):d.y<g.close&&h.y>=u.close&&(d.color=m||e.risingTrendColor||e.color,h.color=m||e.fallingTrendColor||e.color,p.bottom.push(S),p.bottom.push(merge(T,{isNull:!0}))))):g&&(d.y>=g.close?(d.color=m||e.fallingTrendColor||e.color,p.top.push(S)):(d.color=m||e.risingTrendColor||e.color,p.bottom.push(S)));objectEach(p,function(e,o){t.points=e,t.options=merge(c[o].styles,a),t.graph=t["graph"+o+"Line"],SMAIndicator.prototype.drawGraph.call(t),t["graph"+o+"Line"]=t.graph}),t.points=i,t.options=e,t.graph=n}getValues(e,o){const t=o.period,r=o.multiplier,i=e.xData,n=e.yData,l=[],s=[],a=[],p=0===t?0:t-1,c=[],d=[];let h,g,u,y,x,m,S,T,f,C;if(!(i.length<=t||!isArray(n[0])||4!==n[0].length||t<0)){for(h=ATRIndicator.prototype.getValues.call(this,e,{period:t}).yData,C=0;C<h.length;C++)f=n[p+C],T=n[p+C-1]||[],x=c[C-1],m=d[C-1],S=a[C-1],0===C&&(x=m=S=0),g=correctFloat((f[1]+f[2])/2+r*h[C]),u=correctFloat((f[1]+f[2])/2-r*h[C]),g<x||T[3]>x?c[C]=g:c[C]=x,u>m||T[3]<m?d[C]=u:d[C]=m,S===x&&f[3]<c[C]||S===m&&f[3]<d[C]?y=c[C]:(S===x&&f[3]>c[C]||S===m&&f[3]>d[C])&&(y=d[C]),l.push([i[p+C],y]),s.push(i[p+C]),a.push(y);return{values:l,xData:s,yData:a}}}}SupertrendIndicator.defaultOptions=merge(SMAIndicator.defaultOptions,{params:{index:void 0,multiplier:3,period:10},risingTrendColor:"#06b535",fallingTrendColor:"#f21313",changeTrendLine:{styles:{lineWidth:1,lineColor:"#333333",dashStyle:"LongDash"}}}),extend(SupertrendIndicator.prototype,{nameBase:"Supertrend",nameComponents:["multiplier","period"]}),SeriesRegistry.registerSeriesType("supertrend",SupertrendIndicator);export default SupertrendIndicator;