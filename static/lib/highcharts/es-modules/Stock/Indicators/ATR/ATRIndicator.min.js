"use strict";import SeriesRegistry from"../../../Core/Series/SeriesRegistry.js";const SMAIndicator=SeriesRegistry.seriesTypes["sma"];import U from"../../../Core/Utilities.js";const{isArray,merge}=U;function accumulateAverage(e,t,r,a){t=t[a],r=r[a];e.push([t,r])}function getTR(e,t){var r=e[1]-e[2],a=void 0===t?0:Math.abs(e[1]-t[3]),e=void 0===t?0:Math.abs(e[2]-t[3]);return Math.max(r,a,e)}function populateAverage(e,t,r,a,s,i){return[t[a-1],(i*(s-1)+getTR(r[a-1],r[a-2]))/s]}class ATRIndicator extends SMAIndicator{getValues(e,t){const r=t.period,a=e.xData,s=e.yData,i=s?s.length:0,o=a[0],n=s[0],u=[[o,n]],p=[],c=[],g=[];let d,l,h=0,A=1,m=0;if(!(a.length<=r)&&isArray(s[0])&&4===s[0].length){for(l=1;l<=i;l++)accumulateAverage(u,a,s,l),r<A?(d=populateAverage(u,a,s,l,r,h),h=d[1],p.push(d),c.push(d[0]),g.push(d[1])):(r===A?(h=m/(l-1),p.push([a[l-1],h]),c.push(a[l-1]),g.push(h)):m+=getTR(s[l-1],s[l-2]),A++);return{values:p,xData:c,yData:g}}}}ATRIndicator.defaultOptions=merge(SMAIndicator.defaultOptions,{params:{index:void 0}}),SeriesRegistry.registerSeriesType("atr",ATRIndicator);export default ATRIndicator;