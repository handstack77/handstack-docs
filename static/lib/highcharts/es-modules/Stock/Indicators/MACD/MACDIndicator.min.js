"use strict";import H from"../../../Core/Globals.js";const noop=H["noop"];import SeriesRegistry from"../../../Core/Series/SeriesRegistry.js";const{column:ColumnSeries,sma:SMAIndicator}=SeriesRegistry.seriesTypes;import U from"../../../Core/Utilities.js";const{extend,correctFloat,defined,merge}=U;class MACDIndicator extends SMAIndicator{init(){SeriesRegistry.seriesTypes.sma.prototype.init.apply(this,arguments);var e=this.color;this.options&&(defined(this.colorIndex)&&(this.options.signalLine&&this.options.signalLine.styles&&!this.options.signalLine.styles.lineColor&&(this.options.colorIndex=this.colorIndex+1,this.getCyclic("color",void 0,this.chart.options.colors),this.options.signalLine.styles.lineColor=this.color),this.options.macdLine&&this.options.macdLine.styles&&!this.options.macdLine.styles.lineColor&&(this.options.colorIndex=this.colorIndex+1,this.getCyclic("color",void 0,this.chart.options.colors),this.options.macdLine.styles.lineColor=this.color)),this.macdZones={zones:this.options.macdLine.zones,startIndex:0},this.signalZones={zones:this.macdZones.zones.concat(this.options.signalLine.zones),startIndex:this.macdZones.zones.length}),this.color=e}toYData(e){return[e.y,e.signal,e.MACD]}translate(){const i=this,t=["plotSignal","plotMACD"];H.seriesTypes.column.prototype.translate.apply(i),i.points.forEach(function(o){[o.signal,o.MACD].forEach(function(e,s){null!==e&&(o[t[s]]=i.yAxis.toPixels(e,!0))})})}destroy(){this.graph=null,this.graphmacd=this.graphmacd&&this.graphmacd.destroy(),this.graphsignal=this.graphsignal&&this.graphsignal.destroy(),SeriesRegistry.seriesTypes.sma.prototype.destroy.apply(this,arguments)}drawGraph(){const o=this,e=o.points,i=o.options,s=o.zones,t={options:{gapSize:i.gapSize}},n=[[],[]];let r,l=e.length;for(;l--;)r=e[l],defined(r.plotMACD)&&n[0].push({plotX:r.plotX,plotY:r.plotMACD,isNull:!defined(r.plotMACD)}),defined(r.plotSignal)&&n[1].push({plotX:r.plotX,plotY:r.plotSignal,isNull:!defined(r.plotMACD)});["macd","signal"].forEach((e,s)=>{o.points=n[s],o.options=merge(i[e+"Line"]?.styles||{},t),o.graph=o["graph"+e],o.zones=(o[e+"Zones"].zones||[]).slice(o[e+"Zones"].startIndex||0),SeriesRegistry.seriesTypes.sma.prototype.drawGraph.call(o),o["graph"+e]=o.graph}),o.points=e,o.options=i,o.zones=s}applyZones(){var e=this.zones;this.zones=this.signalZones.zones,SeriesRegistry.seriesTypes.sma.prototype.applyZones.call(this),this.graphmacd&&this.options.macdLine.zones.length&&this.graphmacd.hide(),this.zones=e}getValues(e,s){const o=s.longPeriod-s.shortPeriod,i=[],t=[],n=[];let r,l,a,p=0,d;if(!(e.xData.length<s.longPeriod+s.signalPeriod)){for(r=SeriesRegistry.seriesTypes.ema.prototype.getValues(e,{period:s.shortPeriod,index:s.index}),l=SeriesRegistry.seriesTypes.ema.prototype.getValues(e,{period:s.longPeriod,index:s.index}),r=r.values,l=l.values,a=0;a<=r.length;a++)defined(l[a])&&defined(l[a][1])&&defined(r[a+o])&&defined(r[a+o][0])&&i.push([r[a+o][0],0,null,r[a+o][1]-l[a][1]]);for(a=0;a<i.length;a++)t.push(i[a][0]),n.push([0,null,i[a][3]]);for(d=SeriesRegistry.seriesTypes.ema.prototype.getValues({xData:t,yData:n},{period:s.signalPeriod,index:2}).values,a=0;a<i.length;a++)i[a][0]>=d[0][0]&&(i[a][2]=d[p][1],n[a]=[0,d[p][1],i[a][3]],null===i[a][3]?(i[a][1]=0,n[a][0]=0):(i[a][1]=correctFloat(i[a][3]-d[p][1]),n[a][0]=correctFloat(i[a][3]-d[p][1])),p++);return{values:i,xData:t,yData:n}}}}MACDIndicator.defaultOptions=merge(SMAIndicator.defaultOptions,{params:{shortPeriod:12,longPeriod:26,signalPeriod:9,period:26},signalLine:{zones:[],styles:{lineWidth:1,lineColor:void 0}},macdLine:{zones:[],styles:{lineWidth:1,lineColor:void 0}},threshold:0,groupPadding:.1,pointPadding:.1,crisp:!1,states:{hover:{halo:{size:0}}},tooltip:{pointFormat:'<span style="color:{point.color}">‚óè</span> <b> {series.name}</b><br/>Value: {point.MACD}<br/>Signal: {point.signal}<br/>Histogram: {point.y}<br/>'},dataGrouping:{approximation:"averages"},minPointLength:0}),extend(MACDIndicator.prototype,{nameComponents:["longPeriod","shortPeriod","signalPeriod"],pointArrayMap:["y","signal","MACD"],parallelArrays:["x","y","signal","MACD"],pointValKey:"y",markerAttribs:noop,getColumnMetrics:H.seriesTypes.column.prototype.getColumnMetrics,crispCol:H.seriesTypes.column.prototype.crispCol,drawPoints:H.seriesTypes.column.prototype.drawPoints}),SeriesRegistry.registerSeriesType("macd",MACDIndicator);export default MACDIndicator;