"use strict";import H from"../Globals.js";const isTouchDevice=H["isTouchDevice"];import U from"../Utilities.js";const{addEvent,correctFloat,defined,isNumber,pick}=U;function onAxisInit(){var i=this;i.navigatorAxis||(i.navigatorAxis=new NavigatorAxisAdditions(i))}function onAxisSetExtremes(i){const o=this,t=o.chart,e=t.options,s=e.navigator,n=o.navigatorAxis,r=t.zooming.pinchType,a=e.rangeSelector,c=t.zooming.type;let d;var x;o.isXAxis&&(s?.enabled||a?.enabled)&&("y"===c&&"zoom"===i.trigger?d=!1:("zoom"===i.trigger&&"xy"===c||isTouchDevice&&"xy"===r)&&o.options.range&&(x=n.previousZoom,defined(i.min)?n.previousZoom=[o.min,o.max]:x&&(i.min=x[0],i.max=x[1],n.previousZoom=void 0))),void 0!==d&&i.preventDefault()}class NavigatorAxisAdditions{static compose(i){i.keepProps.includes("navigatorAxis")||(i.keepProps.push("navigatorAxis"),addEvent(i,"init",onAxisInit),addEvent(i,"setExtremes",onAxisSetExtremes))}constructor(i){this.axis=i}destroy(){this.axis=void 0}toFixedRange(i,o,t,e){const s=this.axis,n=(s.pointRange||0)/2;let r=pick(t,s.translate(i,!0,!s.horiz)),a=pick(e,s.translate(o,!0,!s.horiz));return defined(t)||(r=correctFloat(r+n)),defined(e)||(a=correctFloat(a-n)),{min:r=isNumber(r)&&isNumber(a)?r:a=void 0,max:a}}}export default NavigatorAxisAdditions;