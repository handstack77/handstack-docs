"use strict";import U from"../../Utilities.js";const{addEvent,removeEvent,isObject,isNumber,pick,wrap}=U;function onTickInit(){var e=this;e.treeGrid||(e.treeGrid=new TreeGridTickAdditions(e))}function onTickHover(e){e.addClass("highcharts-treegrid-node-active"),e.renderer.styledMode||e.css({textDecoration:"underline"})}function onTickHoverExit(e,t){t=isObject(t.style)?t.style:{};e.removeClass("highcharts-treegrid-node-active"),e.renderer.styledMode||e.css({textDecoration:t.textDecoration||"none"})}function renderLabelIcon(e,t){const o=e.treeGrid,r=!o.labelIcon,i=t.renderer,s=t.xy,n=t.options,d=n.width||0,a=n.height||0,l=n.padding??e.axis.linkedParent?0:5,c={x:s.x-d/2-l,y:s.y-a/2},p=t.collapsed?90:180,h=t.show&&isNumber(c.y);let b=o.labelIcon;b||(o.labelIcon=b=i.path(i.symbols[n.type](n.x||0,n.y||0,d,a)).addClass("highcharts-label-icon").add(t.group)),b[h?"show":"hide"](),i.styledMode||b.attr({cursor:"pointer",fill:pick(t.color,"#666666"),"stroke-width":1,stroke:n.lineColor,strokeWidth:n.lineWidth||0}),b[r?"attr":"animate"]({translateX:c.x,translateY:c.y,rotation:p})}function wrapGetLabelPosition(e,t,o,r,i,s,n,d,a){const l=this,c=pick(l.options&&l.options.labels,s),p=l.pos,h=l.axis,b="treegrid"===h.type,k=e.apply(l,[t,o,r,i,c,n,d,a]);return b&&({width:s=0,padding:e=h.linkedParent?0:5}=c&&isObject(c.symbol,!0)?c.symbol:{},t=c&&isNumber(c.indentation)?c.indentation:0,i=(r=(o=h.treeGrid.mapOfPosToGridNode)&&o[p])&&r.depth||1,k.x+=s+2*e+(i-1)*t),k}function wrapRenderLabel(e){const t=this,{pos:o,axis:r,label:i,treeGrid:s,options:n}=t,d=s?.labelIcon,a=i?.element,{treeGrid:l,options:c,chart:p,tickPositions:h}=r,b=l.mapOfPosToGridNode,k=pick(n?.labels,c?.labels),x=k&&isObject(k.symbol,!0)?k.symbol:{},y=b&&b[o],{descendants:G,depth:m}=y||{},u=y&&G&&0<G,g=m,v="treegrid"===r.type&&a,f=-1<h.indexOf(o),T="highcharts-treegrid-node-",w=T+"level-",C=p.styledMode;var E;v&&y&&i.removeClass(new RegExp(w+".*")).addClass(w+g),e.apply(t,Array.prototype.slice.call(arguments,1)),v&&u?(e=l.isCollapsed(y),renderLabelIcon(t,{color:!C&&i.styles.color||"",collapsed:e,group:i.parentGroup,options:x,renderer:i.renderer,show:f,xy:i.xy}),E=T+(e?"expanded":"collapsed"),i.addClass(T+(e?"collapsed":"expanded")).removeClass(E),C||i.css({cursor:"pointer"}),[i,d].forEach(e=>{e&&!e.attachedTreeGridEvents&&(addEvent(e.element,"mouseover",function(){onTickHover(i)}),addEvent(e.element,"mouseout",function(){onTickHoverExit(i,k)}),addEvent(e.element,"click",function(){s.toggleCollapse()}),e.attachedTreeGridEvents=!0)})):d&&(removeEvent(a),i?.css({cursor:"default"}),d.destroy())}class TreeGridTickAdditions{static compose(e){const t=e.prototype;t.toggleCollapse||(addEvent(e,"init",onTickInit),wrap(t,"getLabelPosition",wrapGetLabelPosition),wrap(t,"renderLabel",wrapRenderLabel),t.collapse=function(e){this.treeGrid.collapse(e)},t.expand=function(e){this.treeGrid.expand(e)},t.toggleCollapse=function(e){this.treeGrid.toggleCollapse(e)})}constructor(e){this.tick=e}collapse(e){const t=this.tick,o=t.axis,r=o.brokenAxis;var i;r&&o.treeGrid.mapOfPosToGridNode&&(i=t.pos,i=o.treeGrid.mapOfPosToGridNode[i],i=o.treeGrid.collapse(i),r.setBreaks(i,pick(e,!0)))}destroy(){this.labelIcon&&this.labelIcon.destroy()}expand(e){const{pos:t,axis:o}=this.tick,{treeGrid:r,brokenAxis:i}=o,s=r.mapOfPosToGridNode;var n;i&&s&&(n=s[t],n=r.expand(n),i.setBreaks(n,pick(e,!0)))}toggleCollapse(e){const t=this.tick,o=t.axis,r=o.brokenAxis;var i;r&&o.treeGrid.mapOfPosToGridNode&&(i=t.pos,i=o.treeGrid.mapOfPosToGridNode[i],i=o.treeGrid.toggleCollapse(i),r.setBreaks(i,pick(e,!0)))}}export default TreeGridTickAdditions;