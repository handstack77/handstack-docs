"use strict";import DPU from"../DrawPointUtilities.js";import H from"../../Core/Globals.js";const noop=H["noop"];import SeriesRegistry from"../../Core/Series/SeriesRegistry.js";const ColumnSeries=SeriesRegistry.seriesTypes["column"];import U from"../../Core/Utilities.js";const{extend,isArray,isNumber,isObject,merge}=U;import WordcloudPoint from"./WordcloudPoint.js";import WordcloudSeriesDefaults from"./WordcloudSeriesDefaults.js";import WU from"./WordcloudUtils.js";const{archimedeanSpiral,extendPlayingField,getBoundingBoxFromPolygon,getPlayingField,getPolygon,getRandomPosition,getRotation,getScale,getSpiral,intersectionTesting,isPolygonsColliding,rectangularSpiral,rotate2DToOrigin,rotate2DToPoint,squareSpiral,updateFieldBoundaries}=WU;class WordcloudSeries extends ColumnSeries{pointAttribs(e,t){const i=H.seriesTypes.column.prototype.pointAttribs.call(this,e,t);return delete i.stroke,delete i["stroke-width"],i}deriveFontSize(e,t,i){e=isNumber(e)?e:0,t=isNumber(t)?t:1,i=isNumber(i)?i:1;return Math.floor(Math.max(i,e*t))}drawPoints(){const i=this,o=i.hasRendered,e=i.xAxis,t=i.yAxis,r=i.chart,n=i.group,s=i.options,a=s.animation,l=s.allowExtendPlayingField,d=r.renderer,g=[],p=i.placementStrategy[s.placementStrategy],c=s.rotation,m=i.points.map(function(e){return e.weight}),u=Math.max.apply(null,m),y=i.points.concat().sort((e,t)=>t.weight-e.weight);let x=d.text().add(n),h;i.group.attr({scaleX:1,scaleY:1});for(const b of y){var S=1/u*b.weight,S=i.deriveFontSize(S,s.maxFontSize,s.minFontSize),S=extend({fontSize:S+"px"},s.style),S=(x.css(S).attr({x:0,y:0,text:b.name}),x.getBBox(!0));b.dimensions={height:S.height,width:S.width}}h=getPlayingField(e.len,t.len,y);var f=getSpiral(i.spirals[s.spiral],{field:h});for(const F of y){const w=1/u*F.weight,D=i.deriveFontSize(w,s.maxFontSize,s.minFontSize),W=extend({fontSize:D+"px"},s.style),A=p(F,{data:y,field:h,placed:g,rotation:c}),T=extend(i.pointAttribs(F,F.selected&&"select"),{align:"center","alignment-baseline":"middle","dominant-baseline":"middle",x:A.x,y:A.y,text:F.name,rotation:isNumber(A.rotation)?A.rotation:void 0}),v=getPolygon(A.x,A.y,F.dimensions.width,F.dimensions.height,A.rotation),R=getBoundingBoxFromPolygon(v);let e=intersectionTesting(F,{rectangle:R,polygon:v,field:h,placed:g,spiral:f,rotation:A.rotation}),t;!e&&l&&(h=extendPlayingField(h,R),e=intersectionTesting(F,{rectangle:R,polygon:v,field:h,placed:g,spiral:f,rotation:A.rotation})),isObject(e)?(T.x=(T.x||0)+e.x,T.y=(T.y||0)+e.y,R.left+=e.x,R.right+=e.x,R.top+=e.y,R.bottom+=e.y,h=updateFieldBoundaries(h,R),g.push(F),F.isNull=!1,F.isInside=!0):F.isNull=!0,a&&(t={x:T.x,y:T.y},o?(delete T.x,delete T.y):(T.x=0,T.y=0)),DPU.draw(F,{animatableAttribs:t,attribs:T,css:W,group:n,renderer:d,shapeArgs:void 0,shapeType:"text"})}x=x.destroy();var P=getScale(e.len,t.len,h);i.group.attr({scaleX:P,scaleY:P})}hasData(){var e=this;return isObject(e)&&!0===e.visible&&isArray(e.points)&&0<e.points.length}getPlotBox(){var e=this,t=e.chart,i=t.inverted,o=e[i?"yAxis":"xAxis"],e=e[i?"xAxis":"yAxis"],i=o?o.len:t.plotWidth,r=e?e.len:t.plotHeight;return{translateX:(o?o.left:t.plotLeft)+i/2,translateY:(e?e.top:t.plotTop)+r/2,scaleX:1,scaleY:1}}}WordcloudSeries.defaultOptions=merge(ColumnSeries.defaultOptions,WordcloudSeriesDefaults),extend(WordcloudSeries.prototype,{animate:noop,animateDrilldown:noop,animateDrillupFrom:noop,isCartesian:!1,pointClass:WordcloudPoint,setClip:noop,placementStrategy:{random:function(e,t){var i=t.field,t=t.rotation;return{x:getRandomPosition(i.width)-i.width/2,y:getRandomPosition(i.height)-i.height/2,rotation:getRotation(t.orientations,e.index,t.from,t.to)}},center:function(e,t){t=t.rotation;return{x:0,y:0,rotation:getRotation(t.orientations,e.index,t.from,t.to)}}},pointArrayMap:["weight"],spirals:{archimedean:archimedeanSpiral,rectangular:rectangularSpiral,square:squareSpiral},utils:{extendPlayingField:extendPlayingField,getRotation:getRotation,isPolygonsColliding:isPolygonsColliding,rotate2DToOrigin:rotate2DToOrigin,rotate2DToPoint:rotate2DToPoint}}),SeriesRegistry.registerSeriesType("wordcloud",WordcloudSeries);export default WordcloudSeries;