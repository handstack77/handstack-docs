"use strict";import DotPlotSeriesDefaults from"./DotPlotSeriesDefaults.js";import SeriesRegistry from"../../Core/Series/SeriesRegistry.js";const ColumnSeries=SeriesRegistry.seriesTypes["column"];import U from"../../Core/Utilities.js";const{extend,isNumber,merge,pick}=U;class DotPlotSeries extends ColumnSeries{drawPoints(){const t=this,e=t.options,a=t.chart.renderer,l=e.marker,s=this.points.reduce((e,t)=>e+Math.abs(t.y||0),0),r=this.points.reduce((e,t)=>e+(t.shapeArgs?.height||0),0),d=e.itemPadding||0,i=this.points[0]?.shapeArgs?.width||0;let p=e.slotsPerBar,n=i;if(!isNumber(p))for(p=1;p<s&&!(s/p<r/n*1.2);)p++,n=i/p;var c=r*p/s;for(const D of t.points){var h=D.marker||{},g=h.symbol||l.symbol,m=pick(h.radius,l.radius),u="rect"!==g?c:n,h=D.shapeArgs||{},f=(h.x||0)+((h.width||0)-p*u)/2,y=Math.abs(D.y??0),S=h.y||0,h=h.height||0;let s,r=f,i=D.negative?S:S+h-c,o=0;D.graphics=s=D.graphics||[];const P=D.pointAttr?D.pointAttr[D.selected?"selected":""]||t.pointAttr[""]:t.pointAttribs(D,D.selected&&"select");if(delete P.r,t.chart.styledMode&&(delete P.stroke,delete P["stroke-width"]),"number"==typeof D.y){D.graphic||(D.graphic=a.g("point").add(t.group));for(let t=0;t<y;t++){var A={x:r+u*d,y:i+c*d,width:u*(1-2*d),height:c*(1-2*d),r:m};let e=s[t];e?e.animate(A):e=a.symbol(g).attr(extend(A,P)).add(D.graphic),e.isActive=!0,s[t]=e,r+=u,++o>=p&&(o=0,r=f,i=D.negative?i+c:i-c)}}let e=-1;for(const b of s)++e,b&&(b.isActive?b.isActive=!1:(b.destroy(),s.splice(e,1)))}}}DotPlotSeries.defaultOptions=merge(ColumnSeries.defaultOptions,DotPlotSeriesDefaults),extend(DotPlotSeries.prototype,{markerAttribs:void 0}),SeriesRegistry.registerSeriesType("dotplot",DotPlotSeries);export default DotPlotSeries;