"use strict";import H from"../../Core/Globals.js";const composed=H["composed"];import OHLCPoint from"./OHLCPoint.js";import OHLCSeriesDefaults from"./OHLCSeriesDefaults.js";import SeriesRegistry from"../../Core/Series/SeriesRegistry.js";const HLCSeries=SeriesRegistry.seriesTypes["hlc"];import U from"../../Core/Utilities.js";const{addEvent,crisp,extend,merge,pushUnique}=U;function onSeriesAfterSetOptions(e){const t=e.options,o=t.dataGrouping;o&&t.useOhlcData&&"highcharts-navigator-series"!==t.id&&(o.approximation="ohlc")}function onSeriesInit(e){e=e.options;e.useOhlcData&&"highcharts-navigator-series"!==e.id&&extend(this,{pointValKey:OHLCSeries.prototype.pointValKey,pointArrayMap:OHLCSeries.prototype.pointArrayMap,toYData:OHLCSeries.prototype.toYData})}class OHLCSeries extends HLCSeries{static compose(e){pushUnique(composed,"OHLCSeries")&&(addEvent(e,"afterSetOptions",onSeriesAfterSetOptions),addEvent(e,"init",onSeriesInit))}getPointPath(e,t){const o=super.getPointPath(e,t),s=t.strokeWidth(),i=crisp(e.plotX||0,s),r=Math.round(e.shapeArgs.width/2);return null!==e.open&&(t=crisp(e.plotOpen,s),o.push(["M",i,t],["L",i-r,t]),super.extendStem(o,s/2,t)),o}pointAttribs(e,t){const o=super.pointAttribs.call(this,e,t),s=this.options;return delete o.fill,!e.options.color&&s.upColor&&e.open<e.close&&(o.stroke=s.upColor),o}toYData(e){return[e.open,e.high,e.low,e.close]}}OHLCSeries.defaultOptions=merge(HLCSeries.defaultOptions,OHLCSeriesDefaults),extend(OHLCSeries.prototype,{pointClass:OHLCPoint,pointArrayMap:["open","high","low","close"]}),SeriesRegistry.registerSeriesType("ohlc",OHLCSeries);export default OHLCSeries;