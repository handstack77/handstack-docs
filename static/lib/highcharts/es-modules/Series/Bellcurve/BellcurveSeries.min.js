"use strict";import BellcurveSeriesDefaults from"./BellcurveSeriesDefaults.js";import DerivedComposition from"../DerivedComposition.js";import SeriesRegistry from"../../Core/Series/SeriesRegistry.js";const AreaSplineSeries=SeriesRegistry.seriesTypes["areaspline"];import U from"../../Core/Utilities.js";const{correctFloat,isNumber,merge}=U;class BellcurveSeries extends AreaSplineSeries{static mean(e){var r=e.length,e=e.reduce(function(e,r){return e+r},0);return 0<r&&e/r}static standardDeviation(e,t){var r=e.length,e=(t=isNumber(t)?t:BellcurveSeries.mean(e),e.reduce((e,r)=>{r-=t;return e+r*r},0));return 1<r&&Math.sqrt(e/(r-1))}static normalDensity(e,r,t){e-=r;return Math.exp(-e*e/(2*t*t))/(t*Math.sqrt(2*Math.PI))}derivedData(r,t){const e=this.options,s=e.intervals,i=e.pointsInInterval,a=s*i*2+1,n=t/i,l=[];let o=r-s*t;for(let e=0;e<a;e++)l.push([o,BellcurveSeries.normalDensity(o,r,t)]),o+=n;return l}setDerivedData(){var e=this;e.baseSeries?.yData?.length&&(e.setMean(),e.setStandardDeviation(),e.setData(e.derivedData(e.mean||0,e.standardDeviation||0),!1,void 0,!1))}setMean(){this.mean=correctFloat(BellcurveSeries.mean(this.baseSeries.yData))}setStandardDeviation(){var e=this;e.standardDeviation=correctFloat(BellcurveSeries.standardDeviation(e.baseSeries.yData,e.mean))}}BellcurveSeries.defaultOptions=merge(AreaSplineSeries.defaultOptions,BellcurveSeriesDefaults),DerivedComposition.compose(BellcurveSeries),SeriesRegistry.registerSeriesType("bellcurve",BellcurveSeries);export default BellcurveSeries;