"use strict";import BulletPoint from"./BulletPoint.js";import BulletSeriesDefaults from"./BulletSeriesDefaults.js";import ColumnSeries from"../Column/ColumnSeries.js";import SeriesRegistry from"../../Core/Series/SeriesRegistry.js";import U from"../../Core/Utilities.js";const{extend,isNumber,merge,pick,relativeLength}=U;class BulletSeries extends ColumnSeries{drawPoints(){const a=this,n=a.chart,p=a.options,d=p.animationLimit||250;super.drawPoints.apply(this,arguments);for(const g of a.points){var u=g.options,m=g.target,h=g.y;let t,r=g.targetGraphic,i,s,o,l;if(isNumber(m)&&null!==m){s=(o=merge(p.targetOptions,u.targetOptions)).height;let e=g.shapeArgs;g.dlBox&&e&&!isNumber(e.width)&&(e=g.dlBox),i=relativeLength(o.width,e.width),l=a.yAxis.translate(m,!1,!0,!1,!0)-o.height/2-.5,t=a.crispCol.apply({chart:n,borderWidth:o.borderWidth,options:{crisp:p.crisp}},[e.x+e.width/2-i/2,l,i,s]),r?(r[n.pointCount<d?"animate":"attr"](t),isNumber(h)&&null!==h?r.element.point=g:r.element.point=void 0):g.targetGraphic=r=n.renderer.rect().attr(t).add(a.group),n.styledMode||r.attr({fill:pick(o.color,u.color,a.zones.length&&(g.getZone.call({series:a,x:g.x,y:m,options:{}}).color||a.color)||void 0,g.color,a.color),stroke:pick(o.borderColor,g.borderColor,a.options.borderColor),"stroke-width":o.borderWidth,r:o.borderRadius}),isNumber(h)&&null!==h&&(r.element.point=g),r.addClass(g.getClassName()+" highcharts-bullet-target",!0)}else r&&(g.targetGraphic=r.destroy())}}getExtremes(e){const t=super.getExtremes.call(this,e),r=this.targetData;return r&&r.length&&(e=super.getExtremes.call(this,r),isNumber(e.dataMin)&&(t.dataMin=Math.min(pick(t.dataMin,1/0),e.dataMin)),isNumber(e.dataMax)&&(t.dataMax=Math.max(pick(t.dataMax,-1/0),e.dataMax))),t}}BulletSeries.defaultOptions=merge(ColumnSeries.defaultOptions,BulletSeriesDefaults),extend(BulletSeries.prototype,{parallelArrays:["x","y","target"],pointArrayMap:["y","target"]}),BulletSeries.prototype.pointClass=BulletPoint,SeriesRegistry.registerSeriesType("bullet",BulletSeries);export default BulletSeries;