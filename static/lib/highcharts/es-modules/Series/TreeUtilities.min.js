"use strict";import Color from"../Core/Color/Color.js";import U from"../Core/Utilities.js";const{extend,isArray,isNumber,isObject,merge,pick,relativeLength}=U;function getColor(e,t){const o=t.index,i=t.mapOptionsToLevel,r=t.parentColor,l=t.parentColorIndex,s=t.series,n=t.colors,c=t.siblings,a=s.points,d=s.chart.options.chart;let p,u,v,b,g,f;var h;return e&&(p=a[e.i],u=i[e.level]||{},p&&u.colorByPoint&&(b=p.index%(n?n.length:d.colorCount),v=n&&n[b]),s.chart.styledMode||(g=pick(p&&p.options.color,u&&u.color,v,r&&(e=r,(h=u&&u.colorVariation)&&"brightness"===h.key&&o&&c?Color.parse(e).brighten(h.to*(o/c)).get():e),s.color)),f=pick(p&&p.options.colorIndex,u&&u.colorIndex,b,l,t.colorIndex)),{color:g,colorIndex:f}}function getLevelOptions(e){const t={};let l,o,i,s,r,n;if(isObject(e))for(s=isNumber(e.from)?e.from:1,n=e.levels,o={},l=isObject(e.defaults)?e.defaults:{},isArray(n)&&(o=n.reduce((e,t)=>{let o,i,r;return isObject(t)&&isNumber(t.level)&&(r=merge({},t),i=pick(r.levelIsConstant,l.levelIsConstant),delete r.levelIsConstant,delete r.level,o=t.level+(i?0:s-1),isObject(e[o])?merge(!0,e[o],r):e[o]=r),e},{})),r=isNumber(e.to)?e.to:1,i=0;i<=r;i++)t[i]=merge({},l,isObject(o[i])?o[i]:{});return t}function setTreeValues(i,r){const e=r.before,t=r.idRoot,o=r.mapIdToNode,l=o[t],s=!1!==r.levelIsConstant,n=r.points,c=n[i.i],a=c&&c.options||{},d=[];let p=0;i.levelDynamic=i.level-(s?0:l.level),i.name=pick(c&&c.name,""),i.visible=t===i.id||!0===r.visible,(i="function"==typeof e?e(i,r):i).children.forEach((e,t)=>{var o=extend({},r);extend(o,{index:t,siblings:i.children.length,visible:i.visible}),e=setTreeValues(e,o),d.push(e),e.visible&&(p+=e.val)});var u=pick(a.value,p);return i.visible=0<=u&&(0<p||i.visible),i.children=d,i.childrenTotal=p,i.isLeaf=i.visible&&!p,i.val=u,i}function updateRootId(e){let t,o;return isObject(e)&&(o=isObject(e.options)?e.options:{},t=pick(e.rootNode,o.rootId,""),isObject(e.userOptions)&&(e.userOptions.rootId=t),e.rootNode=t),t}function getNodeWidth(e,t){var{chart:e,options:o}=e,{nodeDistance:o=0,nodeWidth:i=0}=o,{plotSizeX:e=1}=e;if("auto"!==i)return relativeLength(i,e);if("string"==typeof o&&/%$/.test(o))return e/(t+parseFloat(o)/100*(t-1));i=Number(o);return(e+i)/(t||1)-i}const TreeUtilities={getColor:getColor,getLevelOptions:getLevelOptions,getNodeWidth:getNodeWidth,setTreeValues:setTreeValues,updateRootId:updateRootId};export default TreeUtilities;