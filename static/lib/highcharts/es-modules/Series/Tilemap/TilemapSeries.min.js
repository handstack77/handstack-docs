"use strict";import H from"../../Core/Globals.js";const{composed,noop}=H;import SeriesRegistry from"../../Core/Series/SeriesRegistry.js";const{column:ColumnSeries,heatmap:HeatmapSeries,scatter:ScatterSeries}=SeriesRegistry.seriesTypes;import TilemapPoint from"./TilemapPoint.js";import TilemapSeriesDefaults from"./TilemapSeriesDefaults.js";import TilemapShapes from"./TilemapShapes.js";import U from"../../Core/Utilities.js";const{addEvent,extend,merge,pushUnique}=U;function onAxisAfterSetAxisTranslation(){if(!this.recomputingForTilemap&&"colorAxis"!==this.coll){const i=this,e=i.series.map(function(e){return e.getSeriesPixelPadding&&e.getSeriesPixelPadding(i)}).reduce(function(e,i){return(e&&e.padding)>(i&&i.padding)?e:i},void 0)||{padding:0,axisLengthFactor:1},t=Math.round(e.padding*e.axisLengthFactor);e.padding&&(i.len-=t,i.recomputingForTilemap=!0,i.setAxisTranslation(),delete i.recomputingForTilemap,i.minPixelPadding+=e.padding,i.len+=t)}}class TilemapSeries extends HeatmapSeries{static compose(e){pushUnique(composed,"TilemapSeries")&&addEvent(e,"afterSetAxisTranslation",onAxisAfterSetAxisTranslation)}alignDataLabel(){return this.tileShape.alignDataLabel.apply(this,arguments)}drawPoints(){ColumnSeries.prototype.drawPoints.call(this);for(const e of this.points)e.graphic&&e.graphic[this.chart.styledMode?"css":"animate"](this.colorAttribs(e))}getSeriesPixelPadding(e){var i=e.isXAxis,t=this.tileShape.getSeriesPadding(this);if(!t)return{padding:0,axisLengthFactor:1};var s=Math.round(e.translate(i?2*t.xPad:t.yPad,0,1,0,1)),t=Math.round(e.translate(i?t.xPad:0,0,1,0,1));return{padding:(e.single?Math.abs(s-t)/2:Math.abs(s-t))||0,axisLengthFactor:i?2:1.1}}setOptions(){var e=super.setOptions.apply(this,arguments);return this.tileShape=TilemapShapes[e.tileShape],e}translate(){return this.tileShape.translate.apply(this,arguments)}}TilemapSeries.defaultOptions=merge(HeatmapSeries.defaultOptions,TilemapSeriesDefaults),extend(TilemapSeries.prototype,{getSymbol:noop,markerAttribs:ScatterSeries.prototype.markerAttribs,pointAttribs:ColumnSeries.prototype.pointAttribs,pointClass:TilemapPoint}),SeriesRegistry.registerSeriesType("tilemap",TilemapSeries);export default TilemapSeries;