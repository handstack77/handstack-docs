"use strict";import TreegraphNode from"./TreegraphNode.js";class TreegraphLayout{static createDummyNode(e,t,o){const r=new TreegraphNode;return r.id=e.id+"-"+o,r.ancestor=e,r.children.push(t),r.parent=e.id,r.parentNode=e,r.point=t.point,r.level=t.level-o,r.relativeXPosition=t.relativeXPosition,r.visible=t.visible,e.children[t.relativeXPosition]=r,t.oldParentNode=e,t.relativeXPosition=0,t.parentNode=r,t.parent=r.id,r}calculatePositions(e){var t=this,o=e.nodeList,e=(this.resetValues(o),e.tree);e&&(t.calculateRelativeX(e,0),t.beforeLayout(o),t.firstWalk(e),t.secondWalk(e,-e.preX),t.afterLayout(o))}beforeLayout(e){for(const o of e)for(var t of o.children)if(t&&1<t.level-o.level){let e=t.level-o.level-1;for(;0<e;)t=TreegraphLayout.createDummyNode(o,t,e),e--}}resetValues(e){for(const t of e)t.mod=0,(t.ancestor=t).shift=0,t.thread=void 0,t.change=0,t.preX=0}calculateRelativeX(e,t){var o=e.children;for(let e=0,t=o.length;e<t;++e)this.calculateRelativeX(o[e],e);e.relativeXPosition=t}firstWalk(t){var o=this;let r;if(t.hasChildren()){let e=t.getLeftMostChild();for(const l of t.children)o.firstWalk(l),e=o.apportion(l,e);o.executeShifts(t);var i=t.getLeftMostChild(),a=t.getRightMostChild(),i=(i.preX+a.preX)/2;(r=t.getLeftSibling())?(t.preX=r.preX+1,t.mod=t.preX-i):t.preX=i}else(r=t.getLeftSibling())?(t.preX=r.preX+1,t.mod=t.preX):t.preX=0}secondWalk(e,t){e.yPosition=e.preX+t,e.xPosition=e.level;for(const o of e.children)this.secondWalk(o,t+e.mod)}executeShifts(t){let o=0,r=0;for(let e=t.children.length-1;0<=e;e--){const i=t.children[e];i.preX+=o,i.mod+=o,r+=i.change,o+=i.shift+r}}apportion(d,s){var h=d.getLeftSibling();if(h){let e=d,t=d,o=h,r=e.getLeftMostSibling(),i=e.mod,a=t.mod,l=o.mod,n=r.mod;for(;o&&o.nextRight()&&e&&e.nextLeft();){o=o.nextRight(),r=r.nextLeft(),e=e.nextLeft(),(t=t.nextRight()).ancestor=d;var f=o.preX+l-(e.preX+i)+1;0<f&&(this.moveSubtree(d.getAncestor(o,s),d,f),i+=f,a+=f),l+=o.mod,i+=e.mod,n+=r.mod,a+=t.mod}o&&o.nextRight()&&!t.nextRight()&&(t.thread=o.nextRight(),t.mod+=l-a),e&&e.nextLeft()&&!r.nextLeft()&&(r.thread=e.nextLeft(),r.mod+=i-n),s=d}return s}moveSubtree(e,t,o){var r=t.relativeXPosition-e.relativeXPosition;t.change-=o/r,t.shift+=o,t.preX+=o,t.mod+=o,e.change+=o/r}afterLayout(e){for(const t of e)t.oldParentNode&&(t.relativeXPosition=t.parentNode.relativeXPosition,t.parent=t.oldParentNode.parent,t.parentNode=t.oldParentNode,delete t.oldParentNode.children[t.relativeXPosition],(t.oldParentNode.children[t.relativeXPosition]=t).oldParentNode=void 0)}}export default TreegraphLayout;