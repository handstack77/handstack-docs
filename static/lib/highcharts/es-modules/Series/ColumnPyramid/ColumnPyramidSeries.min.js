"use strict";import ColumnPyramidSeriesDefaults from"./ColumnPyramidSeriesDefaults.js";import SeriesRegistry from"../../Core/Series/SeriesRegistry.js";const ColumnSeries=SeriesRegistry.seriesTypes["column"];import U from"../../Core/Utilities.js";const{clamp,merge,pick}=U;class ColumnPyramidSeries extends ColumnSeries{translate(){const h=this,u=h.chart,y=h.options,e=h.dense=h.closestPointRange*h.xAxis.transA<2,t=h.borderWidth=pick(y.borderWidth,e?0:1),c=h.yAxis,g=y.threshold,f=pick(y.minPointLength,5),S=h.getColumnMetrics(),C=S.width,P=h.pointXOffset=S.offset;let x=h.translatedThreshold=c.getThreshold(g),M=h.barW=Math.max(C,1+2*t);u.inverted&&(x-=.5),y.pointPadding&&(M=Math.ceil(M)),super.translate();for(const L of h.points){var T=pick(L.yBottom,x),b=999+Math.abs(T),b=clamp(L.plotY,-b,c.len+b),k=M/2,A=Math.min(b,T),T=Math.max(b,T)-A;let e=L.plotX+P,t,i,s,r,o,n,l,a,m,p,d;y.centerInCategory&&(e=h.adjustForMissingColumns(e,C,L,S)),L.barX=e,L.pointWidth=C,L.tooltipPos=u.inverted?[c.len+c.pos-u.plotLeft-b,h.xAxis.len-e-k,T]:[e+k,b+c.pos-u.plotTop,T],t=g+(L.total||L.y),"percent"===y.stacking&&(t=g+(L.y<0)?-100:100);b=c.toPixels(t,!0);s=(i=u.plotHeight-b-(u.plotHeight-x))?k*(A-b)/i:0,r=i?k*(A+T-b)/i:0,n=e-s+k,l=e+s+k,a=e+r+k,m=e-r+k,p=A-f,d=A+T,L.y<0&&(p=A,d=A+T+f),u.inverted&&(s=k*(b-(o=c.width-A))/(i=b-(c.width-x)),r=k*(b-(o-T))/i,n=e+k+s,l=n-2*s,a=e-r+k,m=e+r+k,p=A,d=A+T-f,L.y<0&&(d=A+T+f)),L.shapeType="path",L.shapeArgs={x:n,y:p,width:l-n,height:T,d:[["M",n,p],["L",l,p],["L",a,d],["L",m,d],["Z"]]}}}}ColumnPyramidSeries.defaultOptions=merge(ColumnSeries.defaultOptions,ColumnPyramidSeriesDefaults),SeriesRegistry.registerSeriesType("columnpyramid",ColumnPyramidSeries);export default ColumnPyramidSeries;