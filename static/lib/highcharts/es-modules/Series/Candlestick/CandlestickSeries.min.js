"use strict";import CandlestickSeriesDefaults from"./CandlestickSeriesDefaults.js";import SeriesRegistry from"../../Core/Series/SeriesRegistry.js";const{column:ColumnSeries,ohlc:OHLCSeries}=SeriesRegistry.seriesTypes;import U from"../../Core/Utilities.js";const{crisp,merge}=U;class CandlestickSeries extends OHLCSeries{pointAttribs(t,e){const o=ColumnSeries.prototype.pointAttribs.call(this,t,e),s=this.options,i=t.open<t.close,r=s.lineColor||this.color,l=t.color||this.color;return o["stroke-width"]=s.lineWidth,o.fill=t.options.color||i&&s.upColor||l,o.stroke=t.options.lineColor||i&&s.upLineColor||r,e&&(t=s.states[e],o.fill=t.color||o.fill,o.stroke=t.lineColor||o.stroke,o["stroke-width"]=t.lineWidth||o["stroke-width"]),o}drawPoints(){const d=this,t=d.points,c=d.chart,h=d.yAxis.reversed;for(const m of t){let t=m.graphic,e,o,s,i,r,l,n,a,p;var u,C=!t;void 0!==m.plotY&&(t||(m.graphic=t=c.renderer.path().add(d.group)),d.chart.styledMode||t.attr(d.pointAttribs(m,m.selected&&"select")).shadow(d.options.shadow),u=t.strokeWidth(),n=crisp(m.plotX||0,u),e=m.plotOpen,o=m.plotClose,s=Math.min(e,o),i=Math.max(e,o),p=Math.round(m.shapeArgs.width/2),r=h?i!==m.yBottom:Math.round(s)!==Math.round(m.plotHigh||0),l=h?Math.round(s)!==Math.round(m.plotHigh||0):i!==m.yBottom,s=crisp(s,u),i=crisp(i,u),(a=[]).push(["M",n-p,i],["L",n-p,s],["L",n+p,s],["L",n+p,i],["Z"],["M",n,s],["L",n,r?Math.round(h?m.yBottom:m.plotHigh):s],["M",n,i],["L",n,l?Math.round(h?m.plotHigh:m.yBottom):i]),t[C?"attr":"animate"]({d:a}).addClass(m.getClassName(),!0))}}}CandlestickSeries.defaultOptions=merge(OHLCSeries.defaultOptions,{tooltip:OHLCSeries.defaultOptions.tooltip},CandlestickSeriesDefaults),SeriesRegistry.registerSeriesType("candlestick",CandlestickSeries);export default CandlestickSeries;