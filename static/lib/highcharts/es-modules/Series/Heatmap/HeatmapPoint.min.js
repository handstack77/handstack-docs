"use strict";import SeriesRegistry from"../../Core/Series/SeriesRegistry.js";const{prototype:{pointClass:ScatterPoint}}=SeriesRegistry.seriesTypes["scatter"];import U from"../../Core/Utilities.js";const{clamp,defined,extend,pick}=U;class HeatmapPoint extends ScatterPoint{applyOptions(e,t){return!this.isNull&&null!==this.value||delete this.color,super.applyOptions(e,t),this.formatPrefix=this.isNull||null===this.value?"null":"point",this}getCellAttributes(){const e=this,t=e.series,i=t.options,s=(i.colsize||1)/2,r=(i.rowsize||1)/2,a=t.xAxis,n=t.yAxis,l=e.options.marker||t.options.marker,o=t.pointPlacementToXValue(),p=pick(e.pointPadding,i.pointPadding,0),h={x1:clamp(Math.round(a.len-a.translate(e.x-s,!1,!0,!1,!0,-o)),-a.len,2*a.len),x2:clamp(Math.round(a.len-a.translate(e.x+s,!1,!0,!1,!0,-o)),-a.len,2*a.len),y1:clamp(Math.round(n.translate(e.y-r,!1,!0,!1,!0)),-n.len,2*n.len),y2:clamp(Math.round(n.translate(e.y+r,!1,!0,!1,!0)),-n.len,2*n.len)};for(const x of[["width","x"],["height","y"]]){var d=x[0],u=x[1];let e=u+"1",t=u+"2";var c=Math.abs(h[e]-h[t]),m=l&&l.lineWidth||0,y=Math.abs(h[e]+h[t])/2,d=l&&l[d];defined(d)&&d<c&&(c=d/2+m/2,h[e]=y-c,h[t]=y+c),p&&(("x"===u&&a.reversed||"y"===u&&!n.reversed)&&(e=t,t=u+"1"),h[e]+=p,h[t]-=p)}return h}haloPath(e){if(!e)return[];var{x:t=0,y:i=0,width:s=0,height:r=0}=this.shapeArgs||{};return[["M",t-e,i-e],["L",t-e,i+r+e],["L",t+s+e,i+r+e],["L",t+s+e,i-e],["Z"]]}isValid(){return this.value!==1/0&&this.value!==-1/0}}extend(HeatmapPoint.prototype,{dataLabelOnNull:!0,moveToTopOnHover:!0,ttBelow:!1});export default HeatmapPoint;