"use strict";import ScatterSeriesDefaults from"./ScatterSeriesDefaults.js";import SeriesRegistry from"../../Core/Series/SeriesRegistry.js";const{column:ColumnSeries,line:LineSeries}=SeriesRegistry.seriesTypes;import U from"../../Core/Utilities.js";const{addEvent,extend,merge}=U;class ScatterSeries extends LineSeries{applyJitter(){const p=this,S=this.options.jitter,l=this.points.length;S&&this.points.forEach(function(o,n){["x","y"].forEach(function(e,t){var r,i,s,a;S[e]&&!o.isNull&&(r="plot"+e.toUpperCase(),s=p[e+"Axis"],a=S[e]*s.transA,s&&!s.logarithmic&&(i=Math.max(0,(o[r]||0)-a),s=Math.min(s.len,(o[r]||0)+a),o[r]=i+(s-i)*(a=n+t*l,(a=1e4*Math.sin(a))-Math.floor(a)),"x"===e&&(o.clientX=o.plotX)))})})}drawGraph(){this.options.lineWidth?super.drawGraph():this.graph&&(this.graph=this.graph.destroy())}}ScatterSeries.defaultOptions=merge(LineSeries.defaultOptions,ScatterSeriesDefaults),extend(ScatterSeries.prototype,{drawTracker:ColumnSeries.prototype.drawTracker,sorted:!1,requireSorting:!1,noSharedTooltip:!0,trackerGroups:["group","markerGroup","dataLabelsGroup"]}),addEvent(ScatterSeries,"afterTranslate",function(){this.applyJitter()}),SeriesRegistry.registerSeriesType("scatter",ScatterSeries);export default ScatterSeries;