"use strict";import SeriesRegistry from"../../Core/Series/SeriesRegistry.js";const{prototype:seriesProto}=SeriesRegistry["series"];import U from"../../Core/Utilities.js";const{defined,fireEvent}=U;class MockPoint{static fromPoint(t){return new MockPoint(t.series.chart,null,{x:t.x,y:t.y,xAxis:t.series.xAxis,yAxis:t.series.yAxis})}static pointToPixels(t,s){const i=t.series,e=i.chart;let o=t.plotX||0,h=t.plotY||0,r;return e.inverted&&(h=t.mock?(o=t.plotY,t.plotX):(o=e.plotWidth-(t.plotY||0),e.plotHeight-(t.plotX||0))),i&&!s&&(r=i.getPlotBox(),o+=r.translateX,h+=r.translateY),{x:o,y:h}}static pointToOptions(t){return{x:t.x,y:t.y,xAxis:t.series.xAxis,yAxis:t.series.yAxis}}constructor(t,s,i){this.mock=!0,this.series={visible:!0,chart:t,getPlotBox:seriesProto.getPlotBox},this.target=s||null,this.options=i,this.applyOptions(this.getOptions())}applyOptions(t){this.command=t.command,this.setAxis(t,"x"),this.setAxis(t,"y"),this.refresh()}getLabelConfig(){return{x:this.x,y:this.y,point:this}}getOptions(){return this.hasDynamicOptions()?this.options(this.target):this.options}hasDynamicOptions(){return"function"==typeof this.options}isInsidePlot(){const t=this.plotX,s=this.plotY,i=this.series.xAxis,e=this.series.yAxis,o={x:t,y:s,isInsidePlot:!0,options:{}};return i&&(o.isInsidePlot=defined(t)&&0<=t&&t<=i.len),e&&(o.isInsidePlot=o.isInsidePlot&&defined(s)&&0<=s&&s<=e.len),fireEvent(this.series.chart,"afterIsInsidePlot",o),o.isInsidePlot}refresh(){const t=this.series,s=t.xAxis,i=t.yAxis,e=this.getOptions();s?(this.x=e.x,this.plotX=s.toPixels(e.x,!0)):(this.x=void 0,this.plotX=e.x),i?(this.y=e.y,this.plotY=i.toPixels(e.y,!0)):(this.y=null,this.plotY=e.y),this.isInside=this.isInsidePlot()}refreshOptions(){const t=this.series,s=t.xAxis,i=t.yAxis;this.x=this.options.x=s?this.options.x=s.toValue(this.plotX,!0):this.plotX,this.y=this.options.y=i?i.toValue(this.plotY,!0):this.plotY}rotate(t,s,i){var e,o,h,r;this.hasDynamicOptions()||(e=Math.cos(i),i=Math.sin(i),r=(o=this.plotX-t)*i+(h=this.plotY-s)*e,this.plotX=o*e-h*i+t,this.plotY=r+s,this.refreshOptions())}scale(t,s,i,e){var o,h;this.hasDynamicOptions()||(o=this.plotX*i,h=this.plotY*e,e=(1-e)*s,this.plotX=(1-i)*t+o,this.plotY=e+h,this.refreshOptions())}setAxis(t,s){const i=s+"Axis",e=t[i],o=this.series.chart;this.series[i]="object"==typeof e?e:defined(e)?o[i][e]||o.get(e):null}toAnchor(){const t=[this.plotX,this.plotY,0,0];return this.series.chart.inverted&&(t[0]=this.plotY,t[1]=this.plotX),t}translate(t,s,i,e){this.hasDynamicOptions()||(this.plotX+=i,this.plotY+=e,this.refreshOptions())}}export default MockPoint;