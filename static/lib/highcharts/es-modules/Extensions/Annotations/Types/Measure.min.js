"use strict";import Annotation from"../Annotation.js";import ControlPoint from"../ControlPoint.js";import U from"../../../Core/Utilities.js";const{defined,extend,isNumber,merge,pick}=U;function average(){let t="";return t=""!==this.max&&""!==this.min?(this.max+this.min)/2:t}function bins(){const t=this.chart.series,s=getExtremes(this.xAxisMin,this.xAxisMax,this.yAxisMin,this.yAxisMax);let i=0,e=!1;return t.forEach(t=>{t.visible&&"highcharts-navigator-series"!==t.options.id&&t.points.forEach(t=>{!t.isNull&&t.x>s.xAxisMin&&t.x<=s.xAxisMax&&t.y>s.yAxisMin&&t.y<=s.yAxisMax&&(i++,e=!0)})}),i=e?i:""}function defaultFormatter(){return"Min: "+this.min+"<br>Max: "+this.max+"<br>Average: "+this.average+"<br>Bins: "+this.bins}function getExtremes(t,s,i,e){return{xAxisMin:Math.min(s,t),xAxisMax:Math.max(s,t),yAxisMin:Math.min(e,i),yAxisMax:Math.max(e,i)}}function getPointPos(t,s,i){return t.toValue(t.toPixels(s)+i)}function init(){const t=this.options.typeOptions,s=this.chart,i=s.inverted,e=s.xAxis[t.xAxis],n=s.yAxis[t.yAxis],o=t.background,a=i?o.height:o.width,r=i?o.width:o.height,h=t.selectType,x=i?e.left:n.top,l=i?n.top:e.left;this.startXMin=t.point.x,this.startYMin=t.point.y,isNumber(a)?this.startXMax=this.startXMin+a:this.startXMax=getPointPos(e,this.startXMin,parseFloat(a)),isNumber(r)?this.startYMax=this.startYMin-r:this.startYMax=getPointPos(n,this.startYMin,parseFloat(r)),"x"===h?(this.startYMin=n.toValue(x),this.startYMax=n.toValue(x+n.len)):"y"===h&&(this.startXMin=e.toValue(l),this.startXMax=e.toValue(l+e.len))}function max(){const t=this.chart.series,s=getExtremes(this.xAxisMin,this.xAxisMax,this.yAxisMin,this.yAxisMax);let i=-1/0,e=!1;return t.forEach(t=>{t.visible&&"highcharts-navigator-series"!==t.options.id&&t.points.forEach(t=>{!t.isNull&&t.y>i&&t.x>s.xAxisMin&&t.x<=s.xAxisMax&&t.y>s.yAxisMin&&t.y<=s.yAxisMax&&(i=t.y,e=!0)})}),i=e?i:""}function min(){const t=this.chart.series,s=getExtremes(this.xAxisMin,this.xAxisMax,this.yAxisMin,this.yAxisMax);let i=1/0,e=!1;return t.forEach(t=>{t.visible&&"highcharts-navigator-series"!==t.options.id&&t.points.forEach(t=>{!t.isNull&&t.y<i&&t.x>s.xAxisMin&&t.x<=s.xAxisMax&&t.y>s.yAxisMin&&t.y<=s.yAxisMax&&(i=t.y,e=!0)})}),i=e?i:""}function recalculate(t){var s=this.options.typeOptions,i=this.chart.xAxis[s.xAxis],s=this.chart.yAxis[s.yAxis],e=this.offsetX,n=this.offsetY;this.xAxisMin=getPointPos(i,this.startXMin,e),this.xAxisMax=getPointPos(i,this.startXMax,e),this.yAxisMin=getPointPos(s,this.startYMin,n),this.yAxisMax=getPointPos(s,this.startYMax,n),this.min=min.call(this),this.max=max.call(this),this.average=average.call(this),this.bins=bins.call(this),t&&this.resize(0,0)}function updateStartPoints(t,s,i,e,n){var o=this.options.typeOptions,a=o.selectType,r=this.chart.xAxis[o.xAxis],o=this.chart.yAxis[o.yAxis],h=this.startXMin,x=this.startXMax,l=this.startYMin,p=this.startYMax,c=this.offsetX,y=this.offsetY;s&&("x"===a?0===i?this.startXMin=getPointPos(r,h,e):this.startXMax=getPointPos(r,x,e):"y"===a?0===i?this.startYMin=getPointPos(o,l,n):this.startYMax=getPointPos(o,p,n):(this.startXMax=getPointPos(r,x,e),this.startYMax=getPointPos(o,p,n))),t&&(this.startXMin=getPointPos(r,h,c),this.startXMax=getPointPos(r,x,c),this.startYMin=getPointPos(o,l,y),this.startYMax=getPointPos(o,p,y),this.offsetX=0,this.offsetY=0),this.options.typeOptions.point={x:this.startXMin,y:this.startYMin},this.userOptions.typeOptions.point={x:this.startXMin,y:this.startYMin}}class Measure extends Annotation{init(t,s,i){super.init(t,s,i),this.offsetX=0,this.offsetY=0,this.resizeX=0,this.resizeY=0,init.call(this),this.addValues(),this.addShapes()}setClipAxes(){this.clipXAxis=this.chart.xAxis[this.options.typeOptions.xAxis],this.clipYAxis=this.chart.yAxis[this.options.typeOptions.yAxis]}pointsOptions(){return this.options.points}shapePointsOptions(){var t=this.options.typeOptions,s=t.xAxis,t=t.yAxis;return[{x:this.xAxisMin,y:this.yAxisMin,xAxis:s,yAxis:t},{x:this.xAxisMax,y:this.yAxisMin,xAxis:s,yAxis:t},{x:this.xAxisMax,y:this.yAxisMax,xAxis:s,yAxis:t},{x:this.xAxisMin,y:this.yAxisMax,xAxis:s,yAxis:t}]}addControlPoints(){const t=this.chart.inverted,s=this.options.controlPointOptions,i=this.options.typeOptions.selectType;defined(this.userOptions.controlPointOptions&&this.userOptions.controlPointOptions.style.cursor)||("x"===i?s.style.cursor=t?"ns-resize":"ew-resize":"y"===i&&(s.style.cursor=t?"ew-resize":"ns-resize"));var e=new ControlPoint(this.chart,this,this.options.controlPointOptions,0);this.controlPoints.push(e),"xy"!==i&&(e=new ControlPoint(this.chart,this,this.options.controlPointOptions,1),this.controlPoints.push(e))}addValues(t){const i=this.options.typeOptions,s=i.label.formatter;recalculate.call(this,t),i.label.enabled&&(0<this.labels.length?this.labels[0].text=s&&s.call(this)||defaultFormatter.call(this):this.initLabel(extend({shape:"rect",backgroundColor:"none",color:"black",borderWidth:0,dashStyle:"Dash",overflow:"allow",align:"left",y:0,x:0,verticalAlign:"top",crop:!0,xAxis:0,yAxis:0,point:function(t){var s=t.annotation,t=t.options;return{x:s.xAxisMin,y:s.yAxisMin,xAxis:pick(i.xAxis,t.xAxis),yAxis:pick(i.yAxis,t.yAxis)}},text:s&&s.call(this)||defaultFormatter.call(this)},i.label),void 0))}addShapes(){this.addCrosshairs(),this.addBackground()}addBackground(){void 0!==this.shapePointsOptions()[0].x&&this.initShape(extend({type:"path",points:this.shapePointsOptions(),className:"highcharts-measure-background"},this.options.typeOptions.background),2)}addCrosshairs(){const t=this.chart,s=this.options.typeOptions,i=this.options.typeOptions.point,e=t.xAxis[s.xAxis],n=t.yAxis[s.yAxis],o=t.inverted,a={point:i,type:"path"};let r=e.toPixels(this.xAxisMin),h=e.toPixels(this.xAxisMax),x=n.toPixels(this.yAxisMin),l=n.toPixels(this.yAxisMax),p=[],c=[],y,M,A;o&&(A=r,r=x,x=A,A=h,h=l,l=A),s.crosshairX.enabled&&(p=[["M",r,x+(l-x)/2],["L",h,x+(l-x)/2]]),s.crosshairY.enabled&&(c=[["M",r+(h-r)/2,x],["L",r+(h-r)/2,l]]),0<this.shapes.length?(this.shapes[0].options.d=p,this.shapes[1].options.d=c):(y=merge(a,{className:"highcharts-measure-crosshair-x"},s.crosshairX),M=merge(a,{className:"highcharts-measure-crosshair-y"},s.crosshairY),this.initShape(extend({d:p},y),0),this.initShape(extend({d:c},M),1))}onDrag(t){var t=this.mouseMoveToTranslation(t),s=this.options.typeOptions.selectType,i="y"===s?0:t.x,s="x"===s?0:t.y;this.translate(i,s),this.offsetX+=i,this.offsetY+=s,this.redraw(!1,!1,!0)}resize(t,s,i,e){const n=this.shapes[2];"x"===e?0===i?(n.translatePoint(t,0,0),n.translatePoint(t,s,3)):(n.translatePoint(t,0,1),n.translatePoint(t,s,2)):"y"===e?0===i?(n.translatePoint(0,s,0),n.translatePoint(0,s,1)):(n.translatePoint(0,s,2),n.translatePoint(0,s,3)):(n.translatePoint(t,0,1),n.translatePoint(t,s,2),n.translatePoint(0,s,3)),updateStartPoints.call(this,!1,!0,i,t,s),this.options.typeOptions.background.height=Math.abs(this.startYMax-this.startYMin),this.options.typeOptions.background.width=Math.abs(this.startXMax-this.startXMin)}redraw(t,s,i){this.linkPoints(),this.graphic||this.render(),i&&updateStartPoints.call(this,!0,!1),this.clipRect&&this.clipRect.animate(this.getClipBox()),this.addValues(s),this.addCrosshairs(),this.redrawItems(this.shapes,t),this.redrawItems(this.labels,t),this.controlPoints.forEach(t=>t.redraw())}translate(s,i){this.shapes.forEach(t=>t.translate(s,i))}}Measure.prototype.defaultOptions=merge(Annotation.prototype.defaultOptions,{typeOptions:{selectType:"xy",xAxis:0,yAxis:0,background:{fill:"rgba(130, 170, 255, 0.4)",strokeWidth:0,stroke:void 0},crosshairX:{enabled:!0,zIndex:6,dashStyle:"Dash",markerEnd:"arrow"},crosshairY:{enabled:!0,zIndex:6,dashStyle:"Dash",markerEnd:"arrow"},label:{enabled:!0,style:{fontSize:"0.7em",color:"#666666"},formatter:void 0}},controlPointOptions:{positioner:function(t){const s=this.index,i=t.chart,e=t.options,n=e.typeOptions,o=n.selectType,a=e.controlPointOptions,r=i.inverted,h=i.xAxis[n.xAxis],x=i.yAxis[n.yAxis],l=getExtremes(t.xAxisMin,t.xAxisMax,t.yAxisMin,t.yAxisMax);let p=t.xAxisMax,c=t.yAxisMax,y,M;return"x"===o&&(c=(l.yAxisMax+l.yAxisMin)/2,0===s&&(p=t.xAxisMin)),"y"===o&&(p=l.xAxisMin+(l.xAxisMax-l.xAxisMin)/2,0===s&&(c=t.yAxisMin)),M=r?(y=x.toPixels(c),h.toPixels(p)):(y=h.toPixels(p),x.toPixels(c)),{x:y-a.width/2,y:M-a.height/2}},events:{drag:function(t,s){var t=this.mouseMoveToTranslation(t),i=s.options.typeOptions.selectType,e=this.index,n="y"===i?0:t.x,t="x"===i?0:t.y;s.resize(n,t,e,i),s.resizeX+=n,s.resizeY+=t,s.redraw(!1,!0)}}}});export default Annotation.types.measure=Measure;