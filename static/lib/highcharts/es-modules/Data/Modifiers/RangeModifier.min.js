"use strict";import DataModifier from"./DataModifier.js";import U from"../../Core/Utilities.js";const merge=U["merge"];class RangeModifier extends DataModifier{constructor(e){super(),this.options=merge(RangeModifier.defaultOptions,e)}modifyTable(d,e){var t=this;t.emit({type:"modify",detail:e,table:d});let f=[];var{additive:g,ranges:i,strict:m}=t.options;if(i.length){const u=d.modified;let r=d.getColumns(),l=[];for(let e=0,t=i.length,s,n;e<t;++e)if(s=i[e],!m||typeof s.minValue==typeof s.maxValue){0<e&&!g&&(u.deleteRows(),u.setRows(l),u.setOriginalRowIndexes(f,!0),r=u.getColumns(),l=[],f=[]);for(let e=0,t=(n=r[s.column]||[]).length,i,o,a;e<t;++e){switch(typeof(i=n[e])){default:continue;case"boolean":case"number":case"string":}m&&typeof i!=typeof s.minValue||i>=s.minValue&&i<=s.maxValue&&(a=g?(o=d.getRow(e),d.getOriginalRowIndex(e)):(o=u.getRow(e),u.getOriginalRowIndex(e)),o&&(l.push(o),f.push(a)))}}u.deleteRows(),u.setRows(l),u.setOriginalRowIndexes(f)}return t.emit({type:"afterModify",detail:e,table:d}),d}}RangeModifier.defaultOptions={type:"Range",ranges:[]},DataModifier.registerType("Range",RangeModifier);export default RangeModifier;