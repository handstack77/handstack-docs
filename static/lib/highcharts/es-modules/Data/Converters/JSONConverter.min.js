"use strict";import DataConverter from"./DataConverter.js";import DataTable from"../DataTable.js";import U from"../../Core/Utilities.js";const{error,isArray,merge,objectEach}=U;class JSONConverter extends DataConverter{constructor(e){e=merge(JSONConverter.defaultOptions,e);super(e),this.columns=[],this.headers=[],this.options=e,this.table=new DataTable}parse(e,t){var s=this;const{beforeParse:r,orientation:a,firstRowAsNames:o,columnNames:n}=e=merge(s.options,e);let i=e.data;if(i){if(s.columns=[],s.emit({type:"parse",columns:s.columns,detail:t,headers:s.headers}),i=(i=r?r(i):i).slice(),"columns"===a)for(let e=0,t=i.length;e<t;e++){const l=i[e];if(!(l instanceof Array))return;s.headers instanceof Array?(o?s.headers.push(""+l.shift()):n&&n instanceof Array&&s.headers.push(n[e]),s.table.setColumn(s.headers[e]||e.toString(),l)):error("JSONConverter: Invalid `columnNames` option.",!1)}else if("rows"===a){o?s.headers=i.shift():n&&(s.headers=n);for(let e=0,t=i.length;e<t;e++){let r=i[e];if(isArray(r))for(let e=0,t=r.length;e<t;e++)s.columns.length<e+1&&s.columns.push([]),s.columns[e].push(r[e]),s.headers instanceof Array?this.table.setColumn(s.headers[e]||e.toString(),s.columns[e]):error("JSONConverter: Invalid `columnNames` option.",!1);else{const n=s.headers;if(n&&!(n instanceof Array)){const c={};objectEach(n,(e,t)=>{c[t]=e.reduce((e,t)=>e[t],r)}),r=c}this.table.setRows([r],e)}}}s.emit({type:"afterParse",columns:s.columns,detail:t,headers:s.headers})}}getTable(){return this.table}}JSONConverter.defaultOptions={...DataConverter.defaultOptions,data:[],orientation:"rows"};export default JSONConverter;